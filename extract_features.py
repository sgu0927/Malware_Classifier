import sys
import pefile
import pandas as pd
from os import listdir
from os.path import isfile, join
from subprocess import check_output, CalledProcessError

# extract opcode instruction


def parse(obj, flag):
    syntax = 'intel'  # or 'att'
    objdump = ['objdump', '-d', '-M', syntax, file_path + '/' + obj]
    try:
        lines = check_output(objdump)
    except CalledProcessError as e:
        print(e)
        return -1

    lines = lines.split(b'Disassembly of section')
    if len(lines) > 1:
        lines = lines[1]
    else:
        print("length <= 1!\n")
        return -1
    if isinstance(lines, bytes):
        lines = lines.split(b'\n')
    else:
        print("lines is not bytes!\n")
        return -1
    if len(lines) > 3:
        lines = lines[3:]
    else:
        print("length <=3!\n")
        return -1

    if flag:
        output_path = './opcode/1/' + obj[:-4] + '.txt'
    else:
        output_path = './opcode/0/' + obj[:-4] + '.txt'
    output_txt = open(output_path, 'w')

    for line in lines:
        line = line.strip()

        tabs = line.split(b'\t')
        if (len(tabs) < 2):
            continue

        instruction = "."
        if (len(tabs) == 3):
            instruction = tabs[2].strip().decode("utf-8")
        tmp = instruction.split()
        instruction = tmp[0]

        if instruction != '.' and instruction is not None:
            print(instruction, file=output_txt)

    output_txt.close()
    return 0


# extract API from IAT
def analyze_IAT(obj, flag):
    if flag:
        output_path = './API/1/' + obj[:-4] + '.txt'
    else:
        output_path = './API/0/' + obj[:-4] + '.txt'
    inputfile = file_path + '/' + obj
    pe = pefile.PE(inputfile)
    output_txt = open(output_path, 'w')

    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for imp in entry.imports:
                if imp.name is not None and imp.name.decode("utf-8")[0].isupper():
                    print(imp.name.decode("utf-8"), file=output_txt)
    except AttributeError as e:
        print(e)
        output_txt.close()
        return
    output_txt.close()


if __name__ == '__main__':
    file_path = sys.argv[1]
    answers = open("1st_answer.csv", "r")
    lines = answers.readlines()
    answers.close()

    cnt = 0
    for line in lines:
        obj, is_malware = line.strip().split(",")

        if parse(obj, int(is_malware)) != -1:
            analyze_IAT(obj, int(is_malware))
        cnt += 1
        # if cnt % 100 == 0:
        #    print(str(cnt) + ' is completed\n')
